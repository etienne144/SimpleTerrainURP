Shader "Custom/SimpleTerrainURP"
{
    Properties
    {
        _MinHeight ("Minimum Height", Float) = 0
        _MaxHeight ("Maximum Height", Float) = 1
        _runTimeCounterLocal ("runTimeCounter", Int) = 0
        _runTimeCounterGenerator ("runTimeCounterGenerator", Float) = 0
        _CurrentHeight("currentHeight", Float) = 1
        _LayerCount ("Layer Count", Int) = 0

        _Texture0("Texture",2D) = "white"{}//
        _Texture1("Texture",2D) = "white"{}//
        _Texture2("Texture",2D) = "white"{}//
        _Texture3("Texture",2D) = "white"{}//
        _Texture4("Texture",2D) = "white"{}//
        _Texture5("Texture",2D) = "white"{}//
        _Texture6("Texture",2D) = "white"{}//
        _Texture7("Texture",2D) = "white"{}//

        _TestScale("Scale", Float) = 1
    }
    SubShader
    {
        Tags {"RenderType" = "Opaque" "RenderPipeline" = "UniversalPipeline"}
        Pass
        {
            Name "ForwardLit"
            Tags{"LightMode" = "UniversalForward"}

            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"

            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
            #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
            #pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
            #pragma multi_compile _ _SHADOWS_SOFT

            #define MAX_LAYERS 8
            struct Attributes
            {
                float4 positionOS   : POSITION;
                float3 normalOS     : NORMAL;
            };
            struct Varyings
            {
                float4 positionCS   : SV_POSITION;
                float3 positionWS   : TEXCOORD0;
                float3 normalWS     : TEXCOORD1;
                //float3 worldNormal  : TEXCOORD2;//
            };
            TEXTURE2D(_Texture0);//
            SAMPLER(sampler_Texture0);//
            TEXTURE2D(_Texture1);//
            SAMPLER(sampler_Texture1);//
            TEXTURE2D(_Texture2);//
            SAMPLER(sampler_Texture2);//
            TEXTURE2D(_Texture3);//
            SAMPLER(sampler_Texture3);//
            TEXTURE2D(_Texture4);//
            SAMPLER(sampler_Texture4);//
            TEXTURE2D(_Texture5);//
            SAMPLER(sampler_Texture5);//
            TEXTURE2D(_Texture6);//
            SAMPLER(sampler_Texture6);//
            TEXTURE2D(_Texture7);//
            SAMPLER(sampler_Texture7);//


            CBUFFER_START(UnityPerMaterial)
                float4 _BaseColor;
                float _MinHeight;
                float _MaxHeight;
                float _CurrentHeight;
                int _LayerCount;
                float3 _BaseColours[MAX_LAYERS];
                float _BaseStartHeights[MAX_LAYERS];
                float _Height0;
                float _Height1;
                float _Height2;
                float _Height3;
                float _Height4;
                float _Height5;
                float _Height6;
                float _Height7;
                float _Blend0;
                float _Blend1;
                float _Blend2;
                float _Blend3;
                float _Blend4;
                float _Blend5;
                float _Blend6;
                float _Blend7;
                float _ColourStrength0;
                float _ColourStrength1;
                float _ColourStrength2;
                float _ColourStrength3;
                float _ColourStrength4;
                float _ColourStrength5;
                float _ColourStrength6;
                float _ColourStrength7;
                float _TextureScale0;
                float _TextureScale1;
                float _TextureScale2;
                float _TextureScale3;
                float _TextureScale4;
                float _TextureScale5;
                float _TextureScale6;
                float _TextureScale7;

                sampler2D _TestTexture;
                SAMPLER(sampler_TestTexture);
                float _TestScale;
            CBUFFER_END
            Varyings vert(Attributes IN)
            {
                Varyings OUT;
                VertexPositionInputs positionInputs = GetVertexPositionInputs(IN.positionOS.xyz);
                VertexNormalInputs normalInputs = GetVertexNormalInputs(IN.normalOS);
                OUT.positionCS = positionInputs.positionCS;
                OUT.positionWS = positionInputs.positionWS;
                OUT.normalWS = normalInputs.normalWS;
                return OUT;
            }
            float inverseLerp(float a, float b, float value)
            {
                return saturate((value - a) / (b - a));
            }
            float3 triplanar(float3 worldPos, float scale, float3 blendAxes, int i)
            {
                float3 scaledWorldPos = worldPos / scale;
                float3 xProjection, yProjection, zProjection;
    
                if (i == 0) {
                    xProjection = SAMPLE_TEXTURE2D(_Texture0, sampler_Texture0, scaledWorldPos.yz).rgb * blendAxes.x;
                    yProjection = SAMPLE_TEXTURE2D(_Texture0, sampler_Texture0, scaledWorldPos.xz).rgb * blendAxes.y;
                    zProjection = SAMPLE_TEXTURE2D(_Texture0, sampler_Texture0, scaledWorldPos.xy).rgb * blendAxes.z;
                } else if (i == 1) {
                    xProjection = SAMPLE_TEXTURE2D(_Texture1, sampler_Texture1, scaledWorldPos.yz).rgb * blendAxes.x;
                    yProjection = SAMPLE_TEXTURE2D(_Texture1, sampler_Texture1, scaledWorldPos.xz).rgb * blendAxes.y;
                    zProjection = SAMPLE_TEXTURE2D(_Texture1, sampler_Texture1, scaledWorldPos.xy).rgb * blendAxes.z;
                }else if (i == 2) {
                    xProjection = SAMPLE_TEXTURE2D(_Texture2, sampler_Texture1, scaledWorldPos.yz).rgb * blendAxes.x;
                    yProjection = SAMPLE_TEXTURE2D(_Texture2, sampler_Texture1, scaledWorldPos.xz).rgb * blendAxes.y;
                    zProjection = SAMPLE_TEXTURE2D(_Texture2, sampler_Texture1, scaledWorldPos.xy).rgb * blendAxes.z;
                }else if (i == 3) {
                    xProjection = SAMPLE_TEXTURE2D(_Texture3, sampler_Texture1, scaledWorldPos.yz).rgb * blendAxes.x;
                    yProjection = SAMPLE_TEXTURE2D(_Texture3, sampler_Texture1, scaledWorldPos.xz).rgb * blendAxes.y;
                    zProjection = SAMPLE_TEXTURE2D(_Texture3, sampler_Texture1, scaledWorldPos.xy).rgb * blendAxes.z;
                }
                else if (i == 4) {
                    xProjection = SAMPLE_TEXTURE2D(_Texture4, sampler_Texture1, scaledWorldPos.yz).rgb * blendAxes.x;
                    yProjection = SAMPLE_TEXTURE2D(_Texture4, sampler_Texture1, scaledWorldPos.xz).rgb * blendAxes.y;
                    zProjection = SAMPLE_TEXTURE2D(_Texture4, sampler_Texture1, scaledWorldPos.xy).rgb * blendAxes.z;
                }
                else if (i == 5) {
                    xProjection = SAMPLE_TEXTURE2D(_Texture5, sampler_Texture1, scaledWorldPos.yz).rgb * blendAxes.x;
                    yProjection = SAMPLE_TEXTURE2D(_Texture5, sampler_Texture1, scaledWorldPos.xz).rgb * blendAxes.y;
                    zProjection = SAMPLE_TEXTURE2D(_Texture5, sampler_Texture1, scaledWorldPos.xy).rgb * blendAxes.z;
                }
                else if (i == 6) {
                    xProjection = SAMPLE_TEXTURE2D(_Texture6, sampler_Texture1, scaledWorldPos.yz).rgb * blendAxes.x;
                    yProjection = SAMPLE_TEXTURE2D(_Texture6, sampler_Texture1, scaledWorldPos.xz).rgb * blendAxes.y;
                    zProjection = SAMPLE_TEXTURE2D(_Texture6, sampler_Texture1, scaledWorldPos.xy).rgb * blendAxes.z;
                }
                else if (i == 7) {
                    xProjection = SAMPLE_TEXTURE2D(_Texture7, sampler_Texture1, scaledWorldPos.yz).rgb * blendAxes.x;
                    yProjection = SAMPLE_TEXTURE2D(_Texture7, sampler_Texture1, scaledWorldPos.xz).rgb * blendAxes.y;
                    zProjection = SAMPLE_TEXTURE2D(_Texture7, sampler_Texture1, scaledWorldPos.xy).rgb * blendAxes.z;
                }

                return xProjection + yProjection + zProjection;
            }
            float4 frag(Varyings IN) : SV_Target
            {
                float heightPercent = inverseLerp(_MinHeight, _MaxHeight, IN.positionWS.y);
                float3 color = _BaseColours[0];
                float3 blendAxes = abs(IN.normalWS);
                blendAxes /= blendAxes.x + blendAxes.y + blendAxes.z;//
                for(int i = 0; i < _LayerCount; i++)
                {
                    float height =  (i == 0) ? _Height0 :(i == 1) ? _Height1 : (i == 2) ? _Height2 : (i == 3) ? _Height3: (i == 4) ? _Height4: (i == 5) ? _Height5: (i == 6) ? _Height6: _Height7;
                    float blend =   (i == 0) ? _Blend0 : (i == 1) ? _Blend1 : (i == 2) ? _Blend2 : (i == 3) ? _Blend3 : (i == 4) ? _Blend4 : (i == 5) ? _Blend5 : (i == 6) ? _Blend6 : _Blend7;
                    float baseColourStrength = (i == 0) ? _ColourStrength0 : (i == 1) ? _ColourStrength1 : (i == 2) ? _ColourStrength2 : (i == 3) ? _ColourStrength3 : (i == 4) ? _ColourStrength4 : (i == 5) ? _ColourStrength5 : (i == 6) ? _ColourStrength6 : _ColourStrength7;
                    float textureScale =  (i == 0) ? _TextureScale0 :(i == 1) ? _TextureScale1 : (i == 2) ? _TextureScale2 : (i == 3) ? _TextureScale3: (i == 4) ? _TextureScale4: (i == 5) ? _TextureScale5: (i == 6) ? _TextureScale6: _TextureScale7;
                    float epsilon = 1E-4;
                    float drawStrength = inverseLerp((-blend/2 - epsilon), (blend/2),(heightPercent - height));
                    
                    float3 baseColour = _BaseColours[i] * baseColourStrength;
                    float3 textureColour = triplanar(IN.positionWS, textureScale, blendAxes, i) * (1-baseColourStrength);
                    float3 layerColor = baseColour + textureColour;
                    color = lerp(color, layerColor, drawStrength);
                }


                float3 normalWS = normalize(IN.normalWS);
                float3 positionWS = IN.positionWS;

                // Hauptlichtquelle
                float4 shadowCoord = TransformWorldToShadowCoord(positionWS);
                Light mainLight = GetMainLight(shadowCoord);
                float3 lightDir = mainLight.direction;
                float3 lightColor = mainLight.color;

                // Ambient
                float3 ambient = SampleSH(normalWS) * color;

                // Diffuse
                float NdotL = saturate(dot(normalWS, lightDir));
                float3 diffuse = lightColor * color * NdotL;

                // Zusammensetzen der finalen Farbe
                float3 finalColor = ambient + diffuse * mainLight.shadowAttenuation;

                // Zusätzliche Lichter
                #ifdef _ADDITIONAL_LIGHTS
                uint additionalLightsCount = GetAdditionalLightsCount();
                for (uint lightIndex = 0u; lightIndex < additionalLightsCount; ++lightIndex)
                {
                    Light light = GetAdditionalLight(lightIndex, positionWS);
                    float3 attenuatedLightColor = light.color * (light.distanceAttenuation * light.shadowAttenuation);
                    finalColor += attenuatedLightColor * NdotL * color;
                }
                #endif

                return float4(finalColor, 1);
            }
            ENDHLSL
        }

        // Shadow casting support
        UsePass "Universal Render Pipeline/Lit/ShadowCaster"
    }
}
